Docker : Docker is a platform which packages application and its dependencies together in the form of containers

this containerization ensures or make sure that the app works in any environment 

development
qa/testing server 
staging/uat server 

Scenario-1
########

Development server build the java project with java 8 version

QA server install java 11 and run java -jar jarfilename

Scenario-2
##########

Development server build the java project with java 11 verison

QA server install java 8 and run java -jar jarfilename 

Scenario-2 wont work because java 11 jar wont work with java 8 version

#############

Developer can build a container having different applications installed on it and give it to the QA team,then QA team would only need to run the container
to replicate developer env.

Command to run the jar file 

java -jar <jar_filename>

Similarly to run java jar file it requires java software, jar file from target directory finally we can run using ENTRYPOINT instruction

Dockerfile:
###########
FROM java:8
COPY target/jarfilename app.jar
ENTRYPOINT ["java","-jar","/app.jar"]


####################

we can use docker image build to create automated build to execute several command line instructions

Dockerfile is a text document which contains all the command that a user can call on command line to assemble an image.

Docker Image : Docker image can be compared to a template which is used to create docker containers.

these are read only template 

we can use docker container run to run image and create a container. 

Docker Container : It is running instance of docker image as they hold entire package to run the application

when you build the docker file we will get docker image, similarly when you run docker image we get the docker container ( application is running) in the container 
             
			 build                run 
Docker file ------> Docker Image ----> Docker Container 

Public Registry --- Docker hub to run any application using docker we need to download the particular image.

If you want to build your own docker image use base docker images like java,python,nodejs



Private Registry --- Amazon ECR ,Azure ACR 

java ---> java docker image
mysql ---> mysql docker image 


######################################

Install docker in amazon linux 

amazon-linux-extras install docker -you

start docker 

service docker start 

#####################################

Download Image from docker hub 

docker pull  <image_name>

docker pull  java 

[root@dev-server ~]# docker pull java
Using default tag: latest
latest: Pulling from library/java
5040bd298390: Pull complete
fce5728aad85: Pull complete
76610ec20bf5: Pull complete
60170fec2151: Pull complete
e98f73de8f0d: Pull complete
11f7af24ed9c: Pull complete
49e2d6393f32: Pull complete
bb9cdec9c7f3: Pull complete
Digest: sha256:c1ff613e8ba25833d2e1940da0940c3824f03f802c449f3d1815a66b7f8c0e9d
Status: Downloaded newer image for java:latest
docker.io/library/java:latest


See the docker images 

docker images 

REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
java         latest    d23bdf5b1b1b   4 years ago   643MB


[root@dev-server ~]# docker pull java:8
8: Pulling from library/java
Digest: sha256:c1ff613e8ba25833d2e1940da0940c3824f03f802c449f3d1815a66b7f8c0e9d
Status: Downloaded newer image for java:8
docker.io/library/java:8
[root@dev-server ~]# docker images
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
java         8         d23bdf5b1b1b   4 years ago   643MB
java         latest    d23bdf5b1b1b   4 years ago   643MB
[root@dev-server ~]# docker pull openjdk:8
8: Pulling from library/openjdk
647acf3d48c2: Pull complete
b02967ef0034: Pull complete
e1ad2231829e: Pull complete
5576ce26bf1d: Pull complete
26518d6c686a: Pull complete
c33f90d4f439: Pull complete
b49e3bcd577c: Pull complete
Digest: sha256:8a77652c3235d52389792e9d9846ab77e7b101db3f208e2a16a12ad14dfc1db3
Status: Downloaded newer image for openjdk:8
docker.io/library/openjdk:8
[root@dev-server ~]# docker images
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
openjdk      8         448f9e615795   9 days ago    526MB
java         8         d23bdf5b1b1b   4 years ago   643MB
java         latest    d23bdf5b1b1b   4 years ago   643MB


If we want to build own docker image
1.Write Dockerfile with below instuctions
2.Docker build to get the docker image
3.Run docker image to run the container or run docker image for container 



FROM adoptopenjdk.openjdk11
ADD ./target/springboot-docker-assignment-without-database-1.0-SNAPSHOT.jar app.jar
RUN bash -c 'touch /app.jar'
ENTRYPOINT ["java","-jar","app.jar"]

or

FROM adoptopenjdk/openjdk11
COPY target/springboot-docker-assignment-without-database-1.0-SNAPSHOT.jar app.jar
ENTRYPOINT ["java","-jar","/app.jar"]



FROM instruction which we mentioned the image name it  will pull from the docker hub

COPY instruction is similar to cp 

ENTRYPOINT is something if we want to execute any command in the terminal or shell.

[root@dev-server springboot-docker-assignment-without-database]# docker image build -t srinadhdocker/springboot-docker .
Sending build context to Docker daemon  35.37MB
Step 1/3 : FROM adoptopenjdk/openjdk11
 ---> ad5f3a4127a4
Step 2/3 : COPY target/springboot-docker-assignment-without-database-1.0-SNAPSHOT.jar app.jar
 ---> b0a2a8e7565a
Step 3/3 : ENTRYPOINT ["java","-jar","/app.jar"]
 ---> Running in 994d2975335b
Removing intermediate container 994d2975335b
 ---> 6a7d10edc973
Successfully built 6a7d10edc973
Successfully tagged srinadhdocker/springboot-docker:latest


[root@dev-server springboot-docker-assignment-without-database]# docker images
REPOSITORY                        TAG       IMAGE ID       CREATED          SIZE
srinadhdocker/springboot-docker   latest    6a7d10edc973   40 seconds ago   455MB
adoptopenjdk/openjdk11            latest    ad5f3a4127a4   6 days ago       437MB
openjdk                           8         448f9e615795   9 days ago       526MB
java                              8         d23bdf5b1b1b   4 years ago      643MB
java                              latest    d23bdf5b1b1b   4 years ago      643MB

[root@dev-server ~]# docker container run --name=dockerspringbootcontainer -p 33333:33333 -d srinadhdocker/springboot-docker
101dbea54490460bfd911c3638ec72ccb155039bb4c9c01c980ec35a92d60764


[root@dev-server ~]# docker ps
CONTAINER ID   IMAGE                             COMMAND                CREATED         STATUS         PORTS                                           NAMES
101dbea54490   srinadhdocker/springboot-docker   "java -jar /app.jar"   2 minutes ago   Up 2 minutes   0.0.0.0:33333->33333/tcp, :::33333->33333/tcp   dockerspringbootcontainer

[root@dev-server ~]# docker ps -a
CONTAINER ID   IMAGE                             COMMAND                CREATED         STATUS         PORTS                                           NAMES
101dbea54490   srinadhdocker/springboot-docker   "java -jar /app.jar"   2 minutes ago   Up 2 minutes   0.0.0.0:33333->33333/tcp, :::33333->33333/tcp   dockerspringbootcontainer

[root@dev-server ~]# docker exec -it 101dbea54490 bash
root@101dbea54490:/# pwd
/
root@101dbea54490:/# ls -lrt
total 17192
drwxr-xr-x   2 root root        6 Apr 15  2020 home
drwxr-xr-x   2 root root        6 Apr 15  2020 boot
lrwxrwxrwx   1 root root        8 Oct  6 16:47 sbin -> usr/sbin
lrwxrwxrwx   1 root root       10 Oct  6 16:47 libx32 -> usr/libx32
lrwxrwxrwx   1 root root        9 Oct  6 16:47 lib64 -> usr/lib64
lrwxrwxrwx   1 root root        9 Oct  6 16:47 lib32 -> usr/lib32
lrwxrwxrwx   1 root root        7 Oct  6 16:47 lib -> usr/lib
lrwxrwxrwx   1 root root        7 Oct  6 16:47 bin -> usr/bin
drwxr-xr-x   1 root root       66 Oct  6 16:47 usr
drwxr-xr-x   2 root root        6 Oct  6 16:47 srv
drwxr-xr-x   2 root root        6 Oct  6 16:47 mnt
drwxr-xr-x   2 root root        6 Oct  6 16:47 media
drwxr-xr-x   1 root root       41 Oct  6 16:58 var
drwx------   2 root root       37 Oct  6 16:58 root
drwxr-xr-x   5 root root       58 Oct  6 16:58 run
drwxr-xr-x   1 root root       18 Nov 19 19:18 opt
-rwxr--r--   1 root root 17602207 Nov 26 16:58 app.jar
drwxr-xr-x   1 root root       66 Nov 26 17:09 etc
dr-xr-xr-x 192 root root        0 Nov 26 17:09 proc
dr-xr-xr-x  13 root root        0 Nov 26 17:09 sys
drwxr-xr-x   5 root root      340 Nov 26 17:09 dev
drwxrwxrwt   1 root root      117 Nov 26 17:09 tmp

or

[root@dev-server ~]# docker exec -it dockerspringbootcontainer bash
root@101dbea54490:/#

docker pull adoptopenjdk/openjdk11

FROM adoptopenjdk/openjdk11

both are same first it will check whether the images pulled/installed if not then it will pull the image from dockerhub

DockerHub Credentials

username : srinadhdocker

password : Srinadh@94



